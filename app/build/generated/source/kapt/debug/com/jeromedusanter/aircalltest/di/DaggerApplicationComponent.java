// Generated by Dagger (https://google.github.io/dagger).
package com.jeromedusanter.aircalltest.di;

import android.app.Activity;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import com.jeromedusanter.aircalltest.Application;
import com.jeromedusanter.aircalltest.Application_MembersInjector;
import com.jeromedusanter.aircalltest.data.remote.ApiService;
import com.jeromedusanter.aircalltest.data.remote.repogithub.RepoGithubRepositoryImpl_Factory;
import com.jeromedusanter.aircalltest.data.remote.repogithub.mappers.IssueDataMapper_Factory;
import com.jeromedusanter.aircalltest.data.remote.repogithub.mappers.RepoGithubDataMapper_Factory;
import com.jeromedusanter.aircalltest.data.remote.repogithub.mappers.RepoGithubSortDataMapper_Factory;
import com.jeromedusanter.aircalltest.domain.MainStore;
import com.jeromedusanter.aircalltest.domain.MainStore_Factory;
import com.jeromedusanter.aircalltest.domain.usecases.repogithub.GetIssuesHistoryByRepoSinceLastYearUseCase_Factory;
import com.jeromedusanter.aircalltest.domain.usecases.repogithub.GetRepoGithubUseCase_Factory;
import com.jeromedusanter.aircalltest.ui.base.BaseActivity_MembersInjector;
import com.jeromedusanter.aircalltest.ui.base.BaseDialogFragment_MembersInjector;
import com.jeromedusanter.aircalltest.ui.base.BaseFragment_MembersInjector;
import com.jeromedusanter.aircalltest.ui.login.LoginActivity;
import com.jeromedusanter.aircalltest.ui.login.LoginViewModel;
import com.jeromedusanter.aircalltest.ui.login.LoginViewModel_Factory;
import com.jeromedusanter.aircalltest.ui.main.MainActivity;
import com.jeromedusanter.aircalltest.ui.main.MainViewModel;
import com.jeromedusanter.aircalltest.ui.main.MainViewModel_Factory;
import com.jeromedusanter.aircalltest.ui.main.features.repogithub.RepoGithubViewModel;
import com.jeromedusanter.aircalltest.ui.main.features.repogithub.RepoGithubViewModel_Factory;
import com.jeromedusanter.aircalltest.ui.main.features.repogithub.details.IssueMapper_Factory;
import com.jeromedusanter.aircalltest.ui.main.features.repogithub.details.RepoGithubDetailsFragment;
import com.jeromedusanter.aircalltest.ui.main.features.repogithub.details.RepoGithubDetailsMapper_Factory;
import com.jeromedusanter.aircalltest.ui.main.features.repogithub.list.RepoGithubListFragment;
import com.jeromedusanter.aircalltest.ui.main.features.repogithub.list.RepoGithubListMapper_Factory;
import com.jeromedusanter.aircalltest.ui.main.features.repogithub.list.filter.RepoGithubFilterDialogFragment;
import com.jeromedusanter.aircalltest.ui.main.features.repogithub.list.filter.RepoGithubFilterMapper_Factory;
import com.jeromedusanter.aircalltest.ui.main.features.repogithub.list.filter.RepoGithubSortMapper_Factory;
import com.jeromedusanter.aircalltest.ui.main.features.test.TestFragment;
import com.jeromedusanter.aircalltest.ui.main.features.test.TestViewModel;
import com.jeromedusanter.aircalltest.ui.main.features.test.TestViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent.Builder>
      loginActivitySubcomponentBuilderProvider;

  private Provider<
          FragmentModule_ContributeRepositoryListFragment.RepoGithubListFragmentSubcomponent
              .Builder>
      repoGithubListFragmentSubcomponentBuilderProvider;

  private Provider<
          FragmentModule_ContributeRepositoryDetailsFragment.RepoGithubDetailsFragmentSubcomponent
              .Builder>
      repoGithubDetailsFragmentSubcomponentBuilderProvider;

  private Provider<
          FragmentModule_ContributeRepoGithubFilterDialogFragment
              .RepoGithubFilterDialogFragmentSubcomponent.Builder>
      repoGithubFilterDialogFragmentSubcomponentBuilderProvider;

  private Provider<FragmentModule_ContributeTestFragment.TestFragmentSubcomponent.Builder>
      testFragmentSubcomponentBuilderProvider;

  private Provider<ApiService> provideDataService$app_debugProvider;

  private RepoGithubRepositoryImpl_Factory repoGithubRepositoryImplProvider;

  private GetRepoGithubUseCase_Factory getRepoGithubUseCaseProvider;

  private GetIssuesHistoryByRepoSinceLastYearUseCase_Factory
      getIssuesHistoryByRepoSinceLastYearUseCaseProvider;

  private RepoGithubDetailsMapper_Factory repoGithubDetailsMapperProvider;

  private RepoGithubFilterMapper_Factory repoGithubFilterMapperProvider;

  private Provider<MainStore> mainStoreProvider;

  private RepoGithubViewModel_Factory repoGithubViewModelProvider;

  private TestViewModel_Factory testViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(2)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(LoginActivity.class, (Provider) loginActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
      getMapOfClassOfAndProviderOfFactoryOf2() {
    return MapBuilder
        .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
            newMapBuilder(4)
        .put(
            RepoGithubListFragment.class,
            (Provider) repoGithubListFragmentSubcomponentBuilderProvider)
        .put(
            RepoGithubDetailsFragment.class,
            (Provider) repoGithubDetailsFragmentSubcomponentBuilderProvider)
        .put(
            RepoGithubFilterDialogFragment.class,
            (Provider) repoGithubFilterDialogFragmentSubcomponentBuilderProvider)
        .put(TestFragment.class, (Provider) testFragmentSubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf2());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.loginActivitySubcomponentBuilderProvider =
        new Provider<ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent.Builder>() {
          @Override
          public ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent.Builder get() {
            return new LoginActivitySubcomponentBuilder();
          }
        };
    this.repoGithubListFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentModule_ContributeRepositoryListFragment.RepoGithubListFragmentSubcomponent
                .Builder>() {
          @Override
          public FragmentModule_ContributeRepositoryListFragment.RepoGithubListFragmentSubcomponent
                  .Builder
              get() {
            return new RepoGithubListFragmentSubcomponentBuilder();
          }
        };
    this.repoGithubDetailsFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentModule_ContributeRepositoryDetailsFragment.RepoGithubDetailsFragmentSubcomponent
                .Builder>() {
          @Override
          public FragmentModule_ContributeRepositoryDetailsFragment
                  .RepoGithubDetailsFragmentSubcomponent.Builder
              get() {
            return new RepoGithubDetailsFragmentSubcomponentBuilder();
          }
        };
    this.repoGithubFilterDialogFragmentSubcomponentBuilderProvider =
        new Provider<
            FragmentModule_ContributeRepoGithubFilterDialogFragment
                .RepoGithubFilterDialogFragmentSubcomponent.Builder>() {
          @Override
          public FragmentModule_ContributeRepoGithubFilterDialogFragment
                  .RepoGithubFilterDialogFragmentSubcomponent.Builder
              get() {
            return new RepoGithubFilterDialogFragmentSubcomponentBuilder();
          }
        };
    this.testFragmentSubcomponentBuilderProvider =
        new Provider<FragmentModule_ContributeTestFragment.TestFragmentSubcomponent.Builder>() {
          @Override
          public FragmentModule_ContributeTestFragment.TestFragmentSubcomponent.Builder get() {
            return new TestFragmentSubcomponentBuilder();
          }
        };
    this.provideDataService$app_debugProvider =
        DoubleCheck.provider(
            RetrofitModule_ProvideDataService$app_debugFactory.create(builder.retrofitModule));
    this.repoGithubRepositoryImplProvider =
        RepoGithubRepositoryImpl_Factory.create(
            provideDataService$app_debugProvider,
            RepoGithubDataMapper_Factory.create(),
            RepoGithubSortDataMapper_Factory.create(),
            IssueDataMapper_Factory.create());
    this.getRepoGithubUseCaseProvider =
        GetRepoGithubUseCase_Factory.create((Provider) repoGithubRepositoryImplProvider);
    this.getIssuesHistoryByRepoSinceLastYearUseCaseProvider =
        GetIssuesHistoryByRepoSinceLastYearUseCase_Factory.create(
            (Provider) repoGithubRepositoryImplProvider);
    this.repoGithubDetailsMapperProvider =
        RepoGithubDetailsMapper_Factory.create(IssueMapper_Factory.create());
    this.repoGithubFilterMapperProvider =
        RepoGithubFilterMapper_Factory.create(RepoGithubSortMapper_Factory.create());
    this.mainStoreProvider =
        DoubleCheck.provider(MainStore_Factory.create((Provider) repoGithubRepositoryImplProvider));
    this.repoGithubViewModelProvider =
        RepoGithubViewModel_Factory.create(
            getRepoGithubUseCaseProvider,
            getIssuesHistoryByRepoSinceLastYearUseCaseProvider,
            RepoGithubListMapper_Factory.create(),
            repoGithubDetailsMapperProvider,
            repoGithubFilterMapperProvider,
            mainStoreProvider);
    this.testViewModelProvider = TestViewModel_Factory.create(mainStoreProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(4)
            .put(LoginViewModel.class, (Provider) LoginViewModel_Factory.create())
            .put(MainViewModel.class, (Provider) MainViewModel_Factory.create())
            .put(RepoGithubViewModel.class, (Provider) repoGithubViewModelProvider)
            .put(TestViewModel.class, (Provider) testViewModelProvider)
            .build();
    this.viewModelFactoryProvider =
        DoubleCheck.provider(
            ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(Application application) {
    injectApplication(application);
  }

  private Application injectApplication(Application instance) {
    Application_MembersInjector.injectDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    Application_MembersInjector.injectMFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    return instance;
  }

  public static final class Builder {
    private RetrofitModule retrofitModule;

    private Builder() {}

    public ApplicationComponent build() {
      if (retrofitModule == null) {
        throw new IllegalStateException(RetrofitModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerApplicationComponent(this);
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder applicationModule(ApplicationModule applicationModule) {
      Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public Builder retrofitModule(RetrofitModule retrofitModule) {
      this.retrofitModule = Preconditions.checkNotNull(retrofitModule);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityModule_ContributeMainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityModule_ContributeMainActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectFactory(
          instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class LoginActivitySubcomponentBuilder
      extends ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent.Builder {
    private LoginActivity seedInstance;

    @Override
    public ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(LoginActivity.class.getCanonicalName() + " must be set");
      }
      return new LoginActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(LoginActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class LoginActivitySubcomponentImpl
      implements ActivityModule_ContributeLoginActivity.LoginActivitySubcomponent {
    private LoginActivitySubcomponentImpl(LoginActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(LoginActivity arg0) {
      injectLoginActivity(arg0);
    }

    private LoginActivity injectLoginActivity(LoginActivity instance) {
      BaseActivity_MembersInjector.injectFactory(
          instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class RepoGithubListFragmentSubcomponentBuilder
      extends FragmentModule_ContributeRepositoryListFragment.RepoGithubListFragmentSubcomponent
          .Builder {
    private RepoGithubListFragment seedInstance;

    @Override
    public FragmentModule_ContributeRepositoryListFragment.RepoGithubListFragmentSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            RepoGithubListFragment.class.getCanonicalName() + " must be set");
      }
      return new RepoGithubListFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(RepoGithubListFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class RepoGithubListFragmentSubcomponentImpl
      implements FragmentModule_ContributeRepositoryListFragment
          .RepoGithubListFragmentSubcomponent {
    private RepoGithubListFragmentSubcomponentImpl(
        RepoGithubListFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(RepoGithubListFragment arg0) {
      injectRepoGithubListFragment(arg0);
    }

    private RepoGithubListFragment injectRepoGithubListFragment(RepoGithubListFragment instance) {
      BaseFragment_MembersInjector.injectFactory(
          instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class RepoGithubDetailsFragmentSubcomponentBuilder
      extends FragmentModule_ContributeRepositoryDetailsFragment
          .RepoGithubDetailsFragmentSubcomponent.Builder {
    private RepoGithubDetailsFragment seedInstance;

    @Override
    public FragmentModule_ContributeRepositoryDetailsFragment.RepoGithubDetailsFragmentSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            RepoGithubDetailsFragment.class.getCanonicalName() + " must be set");
      }
      return new RepoGithubDetailsFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(RepoGithubDetailsFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class RepoGithubDetailsFragmentSubcomponentImpl
      implements FragmentModule_ContributeRepositoryDetailsFragment
          .RepoGithubDetailsFragmentSubcomponent {
    private RepoGithubDetailsFragmentSubcomponentImpl(
        RepoGithubDetailsFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(RepoGithubDetailsFragment arg0) {
      injectRepoGithubDetailsFragment(arg0);
    }

    private RepoGithubDetailsFragment injectRepoGithubDetailsFragment(
        RepoGithubDetailsFragment instance) {
      BaseFragment_MembersInjector.injectFactory(
          instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class RepoGithubFilterDialogFragmentSubcomponentBuilder
      extends FragmentModule_ContributeRepoGithubFilterDialogFragment
          .RepoGithubFilterDialogFragmentSubcomponent.Builder {
    private RepoGithubFilterDialogFragment seedInstance;

    @Override
    public FragmentModule_ContributeRepoGithubFilterDialogFragment
            .RepoGithubFilterDialogFragmentSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            RepoGithubFilterDialogFragment.class.getCanonicalName() + " must be set");
      }
      return new RepoGithubFilterDialogFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(RepoGithubFilterDialogFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class RepoGithubFilterDialogFragmentSubcomponentImpl
      implements FragmentModule_ContributeRepoGithubFilterDialogFragment
          .RepoGithubFilterDialogFragmentSubcomponent {
    private RepoGithubFilterDialogFragmentSubcomponentImpl(
        RepoGithubFilterDialogFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(RepoGithubFilterDialogFragment arg0) {
      injectRepoGithubFilterDialogFragment(arg0);
    }

    private RepoGithubFilterDialogFragment injectRepoGithubFilterDialogFragment(
        RepoGithubFilterDialogFragment instance) {
      BaseDialogFragment_MembersInjector.injectFactory(
          instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class TestFragmentSubcomponentBuilder
      extends FragmentModule_ContributeTestFragment.TestFragmentSubcomponent.Builder {
    private TestFragment seedInstance;

    @Override
    public FragmentModule_ContributeTestFragment.TestFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(TestFragment.class.getCanonicalName() + " must be set");
      }
      return new TestFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(TestFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class TestFragmentSubcomponentImpl
      implements FragmentModule_ContributeTestFragment.TestFragmentSubcomponent {
    private TestFragmentSubcomponentImpl(TestFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(TestFragment arg0) {
      injectTestFragment(arg0);
    }

    private TestFragment injectTestFragment(TestFragment instance) {
      BaseFragment_MembersInjector.injectFactory(
          instance, DaggerApplicationComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
